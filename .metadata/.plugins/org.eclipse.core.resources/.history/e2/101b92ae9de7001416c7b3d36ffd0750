package bolts;

import java.util.HashSet;
import java.util.Map;

import main.TopologyMain;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;

public class llcorrAgg extends BaseBasicBolt {

	double curtstamp = TopologyMain.winSize - 1;

	HashSet<String> leadDirec = new HashSet<String>();


	@Override
	public void cleanup() {

		return;
	}

	@Override
	public void prepare(Map stormConf, TopologyContext context) {


		return;
	}

	@Override
	public void execute(Tuple input, BasicOutputCollector collector) {
		// TODO Auto-generated method stub

		double ts = input.getDoubleByField("ts");
		String leader = input.getStringByField("leader");

		if (ts > curtstamp) {

			curtstamp = ts;
			leadDirec.clear();

			leadDirec.add(pairstr);

		} else if (ts < curtstamp) {
			System.out
					.printf("!!!!!!!!!!!!! direct AjustAggreBolt time sequence disorder\n");
		} else if (Math.abs(ts - curtstamp) <= 1e-3) {

//			declarer.declare(new Fields("ts", "leader", "follower", "lag", "corre"));
			
			ts = input.getDoubleByField("ts");
			String strestr = input.getStringByField("strevec");
			String dftstr = input.getStringByField("dftvec");
			String cellstr = input.getStringByField("cellCoor");
			int streid = input.getIntegerByField("streId");
			int hostflag = input.getIntegerByField("hostFlag");
			leadDirec.add(pairstr);

		}

		return;
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {
		// TODO Auto-generated method stub
	}

}
