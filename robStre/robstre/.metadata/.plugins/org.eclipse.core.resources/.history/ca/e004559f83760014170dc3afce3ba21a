package main;

import spouts.*;

import bolts.*;
import grouping.*;

import backtype.storm.Config;
import backtype.storm.LocalCluster;
import backtype.storm.StormSubmitter;
import backtype.storm.generated.AlreadyAliveException;
import backtype.storm.generated.InvalidTopologyException;

import backtype.storm.topology.TopologyBuilder;
import backtype.storm.tuple.Fields;

//import backtype.storm.metric.LoggingMetricsConsumer;
//import backtype.storm.metric.api.CountMetric;
//import backtype.storm.metric.api.MeanReducer;
//import backtype.storm.metric.api.MultiCountMetric;
//import backtype.storm.metric.api.ReducedMetric;

import java.io.*;
import java.util.ArrayList;

public class TopologyMain {

	// .................DFT approach...........................//

	public static final int dftN = 2;

	// ..................RobStream approach....................//
	public static final int cellTask = 2;

	// .................Random projection......................//

	public static final int rp_vecnum = 10;
	public static final int rp_dimnum = 4;
	public static final String rp_matFile = "rhp-vectors.txt";

	// ..................data set.....................
	public static int datasrc = 1; // 0: synthetic 1: real

	public static int nstreBolt = 2000;
	public static int nstream = 300;
	public static int gridIdxN = 3000;

	public static int nstrFile = 20;
	public static int offsetRow = 0;

	// ...............sampling..................

	final static int sampRate = 1000;
	final static int sampleTimes = 10;

	// .................local parallelism record...........................//

	// public static final int winSize = 3;
	// public static final double thre = 0.98;
	// public static final int tinterval = 100;
	// public static final int wokernum = 2;
	//
	// public static final int preBoltNum = 2;
	// public static final int calBoltNum = 4;
	// public static final int aggreBoltNum = 1;

	// ............cluster parameter ..............//

	public static int tinterval = 2000;
	public static int winSize = 10; // 20 40 80 160 320 640 1280

	public static double thre = 0.95; // 0.95 0.9 0.85 0.8 *

	public static int wokernum = 16;
	public static int preBoltNum = 16;
	public static int calBoltNum = 16;
	public static int aggreBoltNum = 1;

	public static final int winh = (int) (Math.log(calBoltNum) / Math.log(2));

	public static void paraSetup(String env) {
		if (env.compareTo("local") == 0) {
			winSize = 3;
			thre = 0.98;
			tinterval = 40;
			wokernum = 2;

			preBoltNum = 2;
			calBoltNum = 4;
			aggreBoltNum = 1;

			nstreBolt = 20;
			nstream = 20;
			gridIdxN = 20;
		}

	}

	public static void main(String[] args) throws InterruptedException,
			IOException, AlreadyAliveException, InvalidTopologyException {

		System.out.printf("i am ok\n");
		String appro = args[0];

		// Configuration
		Config conf = new Config();
		conf.put("steamsFile", "/home/guo/disStre/robStre/robstre/dataset");
		conf.put("steamsFilter", "syn"); // needs modify

		conf.setDebug(false);
		conf.setNumWorkers(wokernum);

		// Topology run
		conf.put(Config.TOPOLOGY_MAX_SPOUT_PENDING, 100);
		// conf.registerMetricsConsumer(backtype.storm.metrics.LoggingMetricsConsumer.class,
		// 2);
		LocalCluster cluster = new LocalCluster();

		if (appro.compareTo("naive") == 0) {

			String runenv = args[1];
			paraSetup(runenv);

			TopologyBuilder builderNavie = new TopologyBuilder();

			builderNavie.setSpout("sreader", new streamReader());

			builderNavie.setBolt("naivepre", new naivePreBolt(), preBoltNum)
					.fieldsGrouping("sreader", "dataStre", new Fields("sn"))
					.allGrouping("sreader", "contrStre");
			builderNavie
					.setBolt("naivestatis", new naiveStatisBolt(), calBoltNum)
					.fieldsGrouping("naivepre", "streamData",
							new Fields("tspair"))
					.allGrouping("naivepre", "calCommand");
			builderNavie.setBolt("naiveaggre", new naiveAggreBolt(),
					aggreBoltNum).fieldsGrouping("naivestatis",
					new Fields("pair"));

			if (runenv.compareTo("local") == 0) {
				cluster.submitTopology("strqry", conf,
						builderNavie.createTopology());
				Thread.sleep(10000);
			} else if (runenv.compareTo("cluster") == 0) {
				StormSubmitter.submitTopology("conqry", conf,
						builderNavie.createTopology());
			}

		} else if (appro.compareTo("gbc") == 0) {

			String runenv = args[1];
			paraSetup(runenv);

			TopologyBuilder builderGrid = new TopologyBuilder();
			builderGrid.setSpout("sreader", new streamReader());

			builderGrid.setBolt("gridpre", new gridPreBolt(), preBoltNum)
					.fieldsGrouping("sreader", new Fields("sn"));

			builderGrid.setBolt("gridstatis", new gridStatisBolt(), calBoltNum)
					.fieldsGrouping("gridpre", new Fields("coord"));

			builderGrid.setBolt("gridaggre", new gridAggreBolt(), aggreBoltNum)
					.fieldsGrouping("gridstatis", new Fields("pair"));

			if (runenv.compareTo("local") == 0) {
				cluster.submitTopology("strqry", conf,
						builderGrid.createTopology());
				Thread.sleep(2000);
			} else if (runenv.compareTo("cluster") == 0) {
				StormSubmitter.submitTopology("conqry", conf,
						builderGrid.createTopology());
			}

		}

		else if (appro.compareTo("aps") == 0) {

			String runenv = args[1];
			paraSetup(runenv);

			TopologyBuilder builderAdjust = new TopologyBuilder();
			builderAdjust.setSpout("sreader", new streamReader());

			builderAdjust.setBolt("adjPre", new AdjustPreBolt(), preBoltNum)
					.fieldsGrouping("sreader", "dataStre", new Fields("sn"))
					.allGrouping("sreader", "contrStre")
					.directGrouping("adjAppro", "retriStre");

			builderAdjust
					.setBolt("adjAppro", new AdjustCalBolt(), calBoltNum)
					.customGrouping("adjPre", "interStre",
							new AdjustHashGroupEnh())
					.allGrouping("adjPre", "calCommand")
					.directGrouping("adjPre", "winStre");

			builderAdjust
					.setBolt("adjAggre", new AdjustAggreBolt(), aggreBoltNum)
					.fieldsGrouping("adjPre", "qualStre", new Fields("pair"))
					.fieldsGrouping("adjAppro", "interQualStre",
							new Fields("pair"));

			if (runenv.compareTo("local") == 0) {
				cluster.submitTopology("strqry", conf,
						builderAdjust.createTopology());
				Thread.sleep(20000);
			} else if (runenv.compareTo("cluster") == 0) {
				StormSubmitter.submitTopology("conqry", conf,
						builderAdjust.createTopology());
			}

		}

		else if (appro.compareTo("dft") == 0) {

			String runenv = args[1];
			paraSetup(runenv);

			TopologyBuilder builderDft = new TopologyBuilder();
			builderDft.setSpout("sreader", new streamReader());

			builderDft.setBolt("dftPre", new dftPreBolt(), preBoltNum)
					.fieldsGrouping("sreader", "dataStre", new Fields("sn"))
					.allGrouping("sreader", "contrStre");

			builderDft
					.setBolt("dftCal", new dftCalBolt(), calBoltNum)
					.fieldsGrouping("dftPre", "streamData",
							new Fields("cellCoor"))
					.allGrouping("dftPre", "calCommand");

			builderDft.setBolt("dftAggre", new dftAggreBolt(), aggreBoltNum)
					.fieldsGrouping("dftCal", new Fields("pair"));

			if (runenv.compareTo("local") == 0) {
				cluster.submitTopology("strqry", conf,
						builderDft.createTopology());
				Thread.sleep(10000);
			} else if (runenv.compareTo("cluster") == 0) {
				StormSubmitter.submitTopology("conqry", conf,
						builderDft.createTopology());
			}

		} else if (appro.compareTo("lsh") == 0) {

			String runenv = args[1];
			paraSetup(runenv);

			TopologyBuilder builderLSH = new TopologyBuilder();
			builderLSH.setSpout("sreader", new streamReader());

			builderLSH.setBolt("rpPre", new rpPreBolt(), preBoltNum)
					.fieldsGrouping("sreader", "dataStre", new Fields("sn"))
					.allGrouping("sreader", "contrStre");

			builderLSH
					.setBolt("rpCal", new rpCalBolt(), calBoltNum)
					.fieldsGrouping("rpPre", "streamData", new Fields("bucket"))
					.allGrouping("rpPre", "calCommand");

			builderLSH.setBolt("rpAggre", new rpAggreBolt(), aggreBoltNum)
					.fieldsGrouping("rpCal", new Fields("pair"));

			if (runenv.compareTo("local") == 0) {
				cluster.submitTopology("strqry", conf,
						builderLSH.createTopology());
				Thread.sleep(5000);
			} else if (runenv.compareTo("cluster") == 0) {
				StormSubmitter.submitTopology("conqry", conf,
						builderLSH.createTopology());
			}
		} else if (appro.compareTo("rob") == 0) {

			double disThre = 2 - 2 * TopologyMain.thre;
			double cellEps = Math.sqrt(disThre);

			int hSpaceTaskNum = (int) Math.floor(1.0 / cellEps)
					* TopologyMain.cellTask + 1;
			int hSpaceCellNum = (int) Math.ceil(1.0 / cellEps);

			System.out
					.printf(" !!!!!!!!!!  Parallelism for calBolt is %d under eplison %f \n",
							2 * hSpaceTaskNum, cellEps);

			String runenv = args[1];
			paraSetup(runenv);

			TopologyBuilder builderRob = new TopologyBuilder();
			builderRob.setSpout("sreader", new streamReader());

			builderRob.setBolt("robPre", new robPreBolt(), preBoltNum)
					.fieldsGrouping("sreader", "dataStre", new Fields("sn"))
					.allGrouping("sreader", "contrStre");

			builderRob
					.setBolt("robCal", new robCalBolt(), 2 * hSpaceTaskNum)
					.customGrouping("robPre", "streamData", new robStripGroup())
					.allGrouping("robPre", "calCommand");

			builderRob.setBolt("robAggre", new robAggreBolt(), aggreBoltNum)
					.fieldsGrouping("robCal", new Fields("pair"));

			if (runenv.compareTo("local") == 0) {
				cluster.submitTopology("strqry", conf,
						builderRob.createTopology());
				Thread.sleep(5000);
			} else if (runenv.compareTo("cluster") == 0) {
				StormSubmitter.submitTopology("conqry", conf,
						builderRob.createTopology());
			}

		}

		else if (appro.compareTo("dataset") == 0) {

			dataGene dataProd = new dataGene();
			dataProd.generate();
			System.out.printf("!!   Data set is produced\n");

		} else if (appro.compareTo("rhp") == 0) {

			RHPbuild rhp = new RHPbuild();
			rhp.produce(rp_vecnum, rp_dimnum, winSize);
			System.out
					.printf("!!!!!!!!! random hyperplane projection is produced\n");

		}

		else if (appro.compareTo("sample") == 0) {

			int sampcnt = 0, recFlag = 1;
			String curApp = args[1];

			while (sampcnt < sampleTimes) {

				Thread.sleep(sampRate);

				ClusterInformationExtractor metrics = new ClusterInformationExtractor();
				metrics.infoExtractor(curApp, recFlag);
				sampcnt++;

				recFlag = 0;
			}
		}

		System.out.printf("topology is finishing");
		cluster.shutdown();

	}
}