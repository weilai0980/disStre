package bolts;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import main.TopologyMain;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

public class robAggreBolt extends BaseBasicBolt {


	

	// ............input time order..............//

	String streType = new String();
	double ts = 0.0;
	// for long sliding window
	// public double curtstamp = TopologyMain.winSize - 1;
	public double curtstamp = 0.0;
	public double ststamp = 0.0;
	String commandStr=new String(), preCommandStr=new String();

	

	/**
	 * At the end of the spout (when the cluster is shutdown We will show the
	 * word counters
	 */
	@Override
	public void cleanup() {

	}

	@Override
	public void prepare(Map stormConf, TopologyContext context) {
		// TODO Auto-generated method stub

		

		return;
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {

		declarer.declareStream("streamData",new Fields("repType", "strevec", "ts", "taskCoor",
				"streId", "gap"));
		
		declarer.declareStream("calCommand",new Fields("command"));
		return;
	}

	@Override
	public void execute(Tuple input, BasicOutputCollector collector) {
		// TODO Auto-generated method stub

		int i = 0, curTask = 0, tmpgap = 0;
		streType = input.getSourceStreamId();

		if (streType.compareTo("dataStre") == 0) {

			ts = input.getDoubleByField("ts");
			double tmpval = input.getDoubleByField("value");
			int sn = input.getIntegerByField("sn");

			if (Math.abs(ts - curtstamp) <= 1e-3) {

				
			}
		} else if (streType.compareTo("contrStre") == 0) {
			
			commandStr= input.getStringByField("command");
			
			if(commandStr.compareTo(preCommandStr)==0)
			{
				return;
			}

			if (ts - ststamp >= TopologyMain.winSize) {

				ststamp++;

				
			
			collector.emit("calCommand",new Values("done"+Double.toString(curtstamp)));

			// .....update for next tuple...............//
			preCommandStr=commandStr;
			
			for (int j = 0; j < TopologyMain.nstreBolt + 5; ++j) {

				
			}
			curtstamp = ts + 1;

		}
	}
}
