package bolts;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import main.TopologyMain;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

public class robAggreBolt extends BaseBasicBolt {
	
	
	//.............aggregator....................//

	HashSet<String> strePair=new HashSet<String>();
	// ............input time order..............//

	String streType = new String();
	double ts = 0.0;
	public double curtstamp = 0.0;
	public double ststamp = 0.0;
	

	/**
	 * At the end of the spout (when the cluster is shutdown We will show the
	 * word counters
	 */
	@Override
	public void cleanup() {

	}

	@Override
	public void prepare(Map stormConf, TopologyContext context) {
		// TODO Auto-generated method stub

		return;
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {

		return;
	}

	@Override
	public void execute(Tuple input, BasicOutputCollector collector) {
		// TODO Auto-generated method stub

		int i = 0, curTask = 0, tmpgap = 0;
		
		double ts = input.getDoubleByField("ts");
		String pairstr = input.getStringByField("pair");

		if (ts > curtstamp) {

			curtstamp = ts;
			pairDirec.clear();

			pairDirec.add(pairstr);

		} else if (ts < curtstamp) {
			System.out
					.printf("!!!!!!!!!!!!! direct AjustAggreBolt time sequence disorder\n");
		} else if (Math.abs(ts - curtstamp) <= 1e-3) {

			pairDirec.add(pairstr);

		}

		return;

	}
}
