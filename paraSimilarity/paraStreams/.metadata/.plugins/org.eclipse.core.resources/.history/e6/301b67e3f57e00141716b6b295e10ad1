package bolts;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import main.TopologyMain;

//import backtype.storm.metric.LoggingMetricsConsumer;
//import backtype.storm.metric.api.CountMetric;
//import backtype.storm.metric.api.MeanReducer;
//import backtype.storm.metric.api.MultiCountMetric;
//import backtype.storm.metric.api.ReducedMetric;

import backtype.storm.task.TopologyContext;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

public class partPreBolt extends BaseBasicBolt {

	public int taskId = 0;

	// .........time order....................//

	double curtstamp = TopologyMain.winSize - 1;
	// public double ststamp = -TopologyMain.winSize+1;
	double ststamp = 0.0;
	String streType = new String();
	String commandStr = new String(), preCommandStr = new String();
	double ts = 0.0, retriTs = 0.0;
	// .........memory......................//

	int declrNum = (int) (TopologyMain.nstream / TopologyMain.preBoltNum + 1);
	double[][] strevec = new double[declrNum][TopologyMain.winSize + 2];
	double[][] normvec = new double[declrNum][TopologyMain.winSize + 2];

	int[] streid = new int[declrNum + 1];
	int streidCnt = 0;

	int[] vecst = new int[declrNum + 1];
	int[] veced = new int[declrNum + 1];
	int queueLen = TopologyMain.winSize + 1;

	int[] vecflag = new int[declrNum + 1];

	int iniFlag = 1;
	HashSet<Integer> oncePro = new HashSet<Integer>();

	// .........affine relation graph......................//

	// List<List<Integer>> graphmat = new ArrayList<List<Integer>>();
	//
	// List<List<Integer>> adjList = new ArrayList<List<Integer>>();
	// public int[] degree = new int[declrNum + 10];

	// ...........Computation parameter....................//

	final double disThre = 2 - 2 * TopologyMain.thre;
	int localTaskIdx = 0;

	// ............custom metric............

	double emByte = 0.0, dirCnt = 0;

	// transient CountMetric _contData;

	void iniMetrics(TopologyContext context) {
		// _contData= new CountMetric();
		// context.registerMetric("emByte_count", _contData, 5);
	}

	void updateMetrics(double val, boolean isWin) {
		// _contData.incrBy((long)val);

		return;
	}

	// .....................................

	public double[] curexp = new double[declrNum + 10],
			curdev = new double[declrNum + 10],
			cursqr = new double[declrNum + 10],
			cursum = new double[declrNum + 10];

	// int correCalDis(int vecid1, int vecid2, double thre) {
	// double dis = 0.0, tmp = 0.0;
	// int k = vecst[vecid1];
	//
	// if (Math.abs(curdev[vecid1] - 0.0) < 1e-6
	// || Math.abs(curdev[vecid2] - 0.0) < 1e-6) {
	//
	// return 0;
	// }
	//
	// while (k != veced[vecid1]) {
	//
	// normvec[vecid1][k] = (strevec[vecid1][k] - curexp[vecid1])
	// / Math.sqrt(curdev[vecid1]);
	// normvec[vecid2][k] = (strevec[vecid2][k] - curexp[vecid2])
	// / Math.sqrt(curdev[vecid2]);
	//
	// tmp += ((normvec[vecid1][k] - normvec[vecid2][k]) * (normvec[vecid1][k] -
	// normvec[vecid2][k]));
	// k = (k + 1) % queueLen;
	// }
	// dis = tmp;
	//
	// return (dis <= 2 - 2 * thre) ? 1 : 0;
	// }
	//
	// public void graphCons(double thre, BasicOutputCollector collector,
	// double curtime) {
	//
	// int i = 0, tmp;
	//
	// for (int j = 0; j < streidCnt; ++j) {
	//
	// graphmat.add(new ArrayList<Integer>());
	// }
	//
	// for (int j = 0; j < streidCnt; ++j) {
	//
	// // graphmat.add(new ArrayList<Integer>());
	// adjList.add(new ArrayList<Integer>());
	//
	// for (i = j + 1; i < streidCnt; ++i) {
	//
	// tmp = correCalDis(j, i, thre);
	//
	// // .............test............
	//
	// // if (curtime == 3 ) {
	// // System.out.printf("stream pair %d and %d \n",
	// // streid[i],streid[j]);
	// // }
	//
	// // && ((streid[i] == 4 && streid[j] == 18) || (streid[j] == 4 &&
	// // streid[i] == 18))
	// //
	// // if (curtime == 3) {
	// //
	// System.out.printf("-------------------- PreBolt %d compute between %d and %d: %d\n",
	// // taskId, streid[i],streid[j],tmp);
	// // }
	//
	// // && ((streid[i] == 3 && streid[j] == 5) || (streid[j] == 5 &&
	// // streid[i] == 3))
	//
	// // if (curtime == 3
	// // ) {
	// //
	// System.out.printf("-------------------- PreBolt %d compute between %d and %d: %d\n",
	// // taskId,streid[i],streid[j], tmp);
	// // }
	//
	// // ..................
	//
	// if (tmp == 1) {
	// collector.emit("qualStre",
	// new Values(Integer.toString(streid[j]) + ","
	// + Integer.toString(streid[i]), curtime));
	//
	// dirCnt++;
	//
	// // .............test............
	//
	// // if (curtime == 3
	// // && ((streid[i] == 3 && streid[j] == 5) || (streid[j] == 5
	// // && streid[i] == 3))) {
	// // System.out.printf("----------------- PreBolt %d direction emission\n",
	// // taskId);
	// // }
	//
	// // ..................
	//
	// degree[i]++;
	// degree[j]++;
	//
	// graphmat.get(j).add(i);
	// graphmat.get(i).add(j);
	// }
	// }
	// }
	// return;
	// }
	//
	// // .....select pivot streams...............................//
	// public int bfs(int st, int sel[]) {
	// degree[st] = -1;
	// int maxdeg = -1, maxstre = -1, cnt = 0;
	//
	// if (graphmat.get(st).size() > 0) {
	//
	// for (Integer i : graphmat.get(st)) {
	// // for (int i = 0; i < streidCnt; ++i) {
	// // if (graphmat[st][i] == 1 && degree[i] > 0) {
	//
	// if (degree[i] > 0) {
	// degree[i] = -1;
	//
	// adjList.get(st).add(i);
	// // adjList[st][adjcnt[st]++] = i;
	//
	// for (Integer j : graphmat.get(i)) {
	// // for (int j = 0; j < streidCnt; ++j) {
	// // if (graphmat[i][j] == 1 && degree[j] > 0) {
	//
	// if (degree[j] > 0) {
	// degree[j]--;
	// }
	// }
	// }
	// }
	// }
	// for (int j = 0; j < streidCnt; ++j) {
	// if (degree[j] >= 0) {
	// cnt++;
	// if (degree[j] > maxdeg) {
	// maxstre = j;
	// maxdeg = degree[j];
	// }
	// }
	// }
	// sel[0] = maxstre;
	// return cnt;
	// }
	//
	// public int affineSelec(int pivots[]) {
	//
	// int maxdeg = -1, pstre = 0, pivotnum = 0;
	// int[] selstre = new int[3];
	// int res = 0;
	//
	// for (int j = 0; j < streidCnt; ++j) {
	// if (degree[j] > maxdeg) {
	// maxdeg = degree[j];
	// pstre = j;
	// }
	// }
	// pivots[pivotnum++] = pstre;
	//
	// res = bfs(pstre, selstre);
	// while (res > 0) {
	//
	// pstre = selstre[0];
	// pivots[pivotnum++] = pstre;
	//
	// res = bfs(pstre, selstre);
	// }
	//
	// return pivotnum;
	// }
	//
	// // ..............................................................//
	//
	// public String affineCal(int priidx, int secidx) {// ax+b: coef[1]:a
	// // coef[0]:b
	//
	// int k = 0;
	// double primsum = 0.0, secsum = 0.0, prisec = 0.0, unitsum =
	// TopologyMain.winSize;
	// double a0 = 0.0, a1 = 0.0, det = 0.0;
	//
	// k = vecst[priidx];
	// while (k != veced[priidx]) {
	//
	// primsum += normvec[priidx][k];
	// secsum += normvec[secidx][k];
	// prisec += normvec[priidx][k] * normvec[secidx][k];
	//
	// k = (k + 1) % queueLen;
	// }
	//
	// det = 1.0 * unitsum - primsum * primsum;
	// a1 = (unitsum * prisec - primsum * secsum) / det;
	//
	// a0 = (-primsum * prisec + 1.0 * secsum) / det;
	// // a0 = (-primsum * prisec - 1.0 * secsum) / det;
	//
	// k = vecst[priidx];
	// // String errstr = new String(); //residual error vector
	// // errstr = "";
	// double tmperr = 0.0, normerr = 0.0;
	//
	// while (k != veced[priidx]) {
	//
	// tmperr = a1 * normvec[priidx][k] + a0 - normvec[secidx][k];
	//
	// normerr = normerr + tmperr * tmperr;
	// // errstr = errstr + "," + Double.toString(tmperr);
	//
	// k = (k + 1) % queueLen;
	// }
	//
	// return Double.toString(a1) + "," + Double.toString(a0) + ","
	// + Double.toString(normerr);
	// }
	//
	// public String componGridCoor(int idx) { // different from grid-based
	// // approach
	// String coorstr = new String();
	// coorstr = "";
	// int k = 0;
	// k = vecst[idx];
	// int tmp = 0;
	// while (k != veced[idx]) {
	//
	// if (normvec[idx][k] >= 0) {
	//
	// tmp = (int) Math.floor((double) normvec[idx][k]
	// / Math.sqrt(disThre)); // watch out for: it is floor
	// // here.
	//
	// } else {
	// tmp = -1
	// * (int) Math.ceil((double) -1 * normvec[idx][k]
	// / Math.sqrt(disThre));
	// }
	//
	// coorstr = coorstr + Integer.toString(tmp) + ",";
	//
	// k = (k + 1) % queueLen;
	// }
	//
	// return coorstr;
	// }
	//
	// public void componConsAffine(int idx, String affvec[]) {
	//
	// String affstr = new String(), adjidx = new String();
	// int k = 0;
	// affstr = "";
	// adjidx = "";
	//
	// k = vecst[idx];
	// while (k != veced[idx]) {
	// affstr = affstr + Double.toString(normvec[idx][k]) + ",";
	// k = (k + 1) % queueLen;
	// }
	// affvec[0] = affstr;// pivot stream vector
	// affstr = "";
	//
	// // for (int i = 0; i < adjcnt[idx]; ++i) {
	//
	// for (Integer i : adjList.get(idx)) {
	//
	// // affstr = affstr + affineCal(idx, adjList[idx][i]) + ";";
	// //
	// // adjidx = adjidx + Integer.toString(streid[adjList[idx][i]]) +
	// // ",";
	//
	// affstr = affstr + affineCal(idx, i) + ";";
	//
	// adjidx = adjidx + Integer.toString(streid[i]) + ",";
	//
	// }
	// affvec[1] = affstr; // affine relations with pivot stream
	// affvec[2] = adjidx;
	//
	// return;
	// }

	public String prepCellVec(int memidx) {

		int k = 0;
		String stre=new String();
		k = veced[memidx];
		double tmpnorm = 0.0;
		while (k != veced[memidx]) {

			tmpnorm = (strevec[memidx][k] - curexp[memidx])
					/ Math.sqrt(curdev[memidx]);

			k = (k + 1) % queueLen;
		}
//		dis = tmp;
		return 
	}

	public void idxNewTuple(int strid, double val, int flag) {
		int i = 0, tmpsn = 0;
		double oldval = 0.0, newval = 0.0;

		for (i = 0; i < streidCnt; ++i) {
			if (streid[i] == strid) {
				tmpsn = i;
				break;
			}
		}
		if (i == streidCnt) {
			streid[i] = strid;
			tmpsn = streidCnt;
			streidCnt++;

		}

		if (vecflag[tmpsn] == 0) {

			strevec[tmpsn][veced[tmpsn]] = val;
			veced[tmpsn] = (veced[tmpsn] + 1) % queueLen;

			oldval = strevec[tmpsn][vecst[tmpsn]];
			newval = val;

			vecst[tmpsn] = (vecst[tmpsn] + 1 * flag) % queueLen;

			curexp[tmpsn] = curexp[tmpsn] - oldval / TopologyMain.winSize
					* flag + newval / TopologyMain.winSize;
			cursqr[tmpsn] = cursqr[tmpsn] - oldval * oldval * flag + newval
					* newval;
			cursum[tmpsn] = cursum[tmpsn] - oldval * flag + newval;

			curdev[tmpsn] = cursqr[tmpsn] + TopologyMain.winSize
					* curexp[tmpsn] * curexp[tmpsn] - 2 * cursum[tmpsn]
					* curexp[tmpsn];

			vecflag[tmpsn] = 1;

		}

	}

	String prepStream2Str(double reqTs, int idx) {

		String str = new String();
		// ............test........

		// if (retriTs == 2 && (id == 8 || id == 11)) {
		//
		// System.out.printf("Prebolt %d has data %d for %d on %d\n", taskId,
		// streidCnt, id, idx);
		//
		// }

		// ........................

		//
		// String str = new String();
		// for (int i = 0; i < streidCnt; ++i) {
		// if (streid[i] == id) {
		// streIdx = i;
		// break;
		// }
		// }

		// ............test........
		// if (retriTs == 2 && (id == 8 || id == 11)) {
		//
		// System.out.printf("Prebolt %d has data %d for %d on %d\n", taskId,
		// streidCnt, id, idx);
		//
		// }
		// ........................

		if (reqTs == ts || (reqTs < ts && vecflag[idx] == 0)) {

			// .........test.......

			// if (retriTs == 2 && (id == 8 || id == 11)) {
			// System.out.printf("stream %d 's index is: %d \n", id, idx);
			// }

			// ....................

			int k = vecst[idx];
			while (k != veced[idx]) {
				str = str + Double.toString(strevec[idx][k]) + ",";
				k = (k + 1) % queueLen;
			}
		} else if (reqTs < ts && vecflag[idx] == 1) {

			int k = (vecst[idx] == 0 ? queueLen - 1 : (vecst[idx] - 1)), cnt = 0;
			while (cnt < TopologyMain.winSize) {
				str = str + Double.toString(strevec[idx][k]) + ",";
				k = (k + 1) % queueLen;
				cnt++;
			}
		}
		return str;
	}

	/**
	 * At the end of the spout (when the cluster is shutdown We will show the
	 * word counters
	 */
	@Override
	public void cleanup() {
		// System.out.println("-- Word Counter [" + name + "-" + id + "] --");
		// for (Map.Entry<String, Integer> entry : counters.entrySet()) {
		// System.out.println(entry.getKey() + ": " + entry.getValue());
		// }

		// ....output stream........

	}

	@Override
	public void prepare(Map stormConf, TopologyContext context) {
		// TODO Auto-generated method stub

		taskId = context.getThisTaskId();
		localTaskIdx = context.getThisTaskIndex();

		for (int j = 0; j < declrNum + 1; j++) {
			vecst[j] = 0;
			veced[j] = 0;

			if (TopologyMain.iniWindow == 0) {
				veced[j] = TopologyMain.winSize - 1;
			}

			vecflag[j] = 0;
			streid[j] = 0;

			curexp[j] = 0;
			curdev[j] = 0;
			cursqr[j] = 0;
			cursum[j] = 0;
		}

		iniMetrics(context);
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {

		declarer.declareStream("interStre", new Fields("id", "strevec",
				"cellvec", "ts"));

		// declarer.declareStream("qualStre", new Fields("pair", "ts"));

		// declarer.declareStream("winStre", new Fields("ts", "Ids", "streams",
		// "taskId"));

		declarer.declareStream("calCommand", new Fields("command", "taskid"));

		return;
	}

	@Override
	public void execute(Tuple input, BasicOutputCollector collector) {
		// TODO Auto-generated method stub

		int i = 0, tmppivot = 0;
		int[] pivotset = new int[TopologyMain.nstream + 5];
		int pivotcnt = 0;
		int streIdx = 0;

		String coorStr = new String();
		String[] streAffine = new String[4];

		streType = input.getSourceStreamId();

		if (streType.compareTo("dataStre") == 0) {

			ts = input.getDoubleByField("ts");
			double tmpval = input.getDoubleByField("value");
			int sn = input.getIntegerByField("sn");

			if (oncePro.contains(sn) == false) {

				idxNewTuple(sn, tmpval, 1 - iniFlag);
				oncePro.add(sn);
			}

		} else if (streType.compareTo("contrStre") == 0) {

			commandStr = input.getStringByField("command");

			if (commandStr.compareTo(preCommandStr) == 0) {
				return;
			}

			if (ts - ststamp >= TopologyMain.winSize - 1) {

				ststamp++;
				// emByte = 0.0; // for window metric
				dirCnt = 0.0;

				// .............test............

				// if (ts == 15)
				// {
				//
				// System.out.printf("?????????? Prebolt %d has streams: ",
				// taskId);
				// for (int k = 0; k < streidCnt; ++k) {
				//
				// System.out.printf("%d, ", streid[k]);
				// }
				// System.out.printf("\n");
				//
				//
				// }

				// ..................

				// graphCons(TopologyMain.thre, collector, curtstamp);
				// pivotcnt = affineSelec(pivotset);

				for (i = 0; i < streidCnt; ++i) {

					// tmppivot = pivotset[i];
					// componConsAffine(tmppivot, streAffine);
					// coorStr = componGridCoor(tmppivot);

					// declarer.declareStream("interStre", new Fields("id",
					// "strevec",
					// "cellvec", "ts"));

					collector.emit("interStre", new Values(streid[tmppivot],
							curtstamp)); // modification
					iniFlag = 0;

					// .......comm byte metric........
					// emByte += (adjList.get(i).size() * 3 + 2 *
					// TopologyMain.winSize);

					// ...............................

				}
				collector
						.emit("calCommand",
								new Values("done" + Double.toString(curtstamp),
										taskId));

				// .......... custom metrics........
				updateMetrics(emByte, true);

				// ..........test.............

				// System.out
				// .printf("At time %f, PreBolt %d sends direct qualified stream %f\n",
				// curtstamp, taskId, dirCnt);

				// ..............................

				// ..........test.............
				// System.out
				// .printf("At time %f, PreBolt %d sends stream with cost %f, compared to naive cost %f\n",
				// curtstamp, taskId, emByte,
				// (double) TopologyMain.nstream/ TopologyMain.preBoltNum *
				// TopologyMain.winSize * 19);

				// ..............................
			}

			// .....update for next tuple...............//
			oncePro.clear();

			preCommandStr = commandStr;
			curtstamp = ts + 1;

			// graphmat.clear();
			// adjList.clear();
			for (int j = 0; j < declrNum + 1; ++j) {
				// degree[j] = 0;
				vecflag[j] = 0;
			}
		}

		// else if (streType.compareTo("retriStre") == 0) {
		// // declarer.declareStream("retriStre", new Fields("ts", "streId",
		// // "targetTask"));
		//
		// // add one hashing mechanism
		//
		// retriTs = input.getDoubleByField("ts");
		// String ids = input.getStringByField("streams");
		// int task = input.getIntegerByField("targetTask");
		//
		// int len = ids.length(), pre = 0, tmp = 0, streamCnt = 0, j = 0;
		// int[] streams = new int[declrNum];
		// String outStr = new String(), outVectors = new String(), tmpStr = new
		// String();
		//
		// // // .........test..........
		// // System.out
		// //
		// .printf("  ????????????? at time %f Prebolt %d receive stream ids:%s \n",
		// // retriTs, taskId, ids);
		//
		// // // .......................
		//
		// for (i = 0; i < len; ++i) {
		// if (ids.charAt(i) == ',') {
		//
		// tmpStr = ids.substring(pre, i);
		//
		// tmp = Integer.parseInt(tmpStr);
		//
		// // .........test..........
		// // System.out.printf(
		// // " !!!!!!!  Prebolt %d parse id %d from %s  \n",
		// // taskId, tmp, tmpStr);
		//
		// // .......................
		//
		// pre = i + 1;
		//
		// // j = 0;
		// // for (j = 0; j < streamCnt; ++j) {
		// // if (streams[j] == tmp) {
		// // break;
		// // }
		// // }
		// //
		// // if (j == streamCnt) {
		// // streams[streamCnt++] = tmp;
		//
		// for (int k = 0; k < streidCnt; ++k) {
		//
		// if (streid[k] == tmp) {
		// streIdx = k;
		// break;
		// }
		// }
		//
		// // .........test..........
		// // System.out
		// //
		// .printf("  ????????????? at time %f Prebolt %d get id %d from %s\n",
		// // retriTs, taskId, tmp, tmpStr);
		//
		// // .......................
		//
		// outStr = outStr + tmpStr + ",";
		// outVectors = outVectors + prepStream2Str(retriTs, streIdx);
		// //
		// // }
		// }
		// }
		//
		// // .........test..........
		// // System.out
		// //
		// .printf("  ????????????? at time %f Prebolt %d output ids %s  and vectors %s\n",
		// // retriTs, taskId, outStr, outVectors);
		//
		// // .......................
		//
		// collector.emitDirect(task, "winStre", new Values(retriTs, outStr,
		// outVectors, taskId));
		//
		// }
	}
}
