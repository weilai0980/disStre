package bolts;

import java.util.Map;

import main.TopologyMain;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

public class paraCoverPreBolt extends BaseBasicBolt {

	// .........memory management for sliding windows.................//
	int declrNum = (int) (TopologyMain.nstreBolt / TopologyMain.preBoltNum + 10);
	public double[][] strevec = new double[declrNum][TopologyMain.winSize + 6];
	public double[][] normvec = new double[declrNum][TopologyMain.winSize + 6];

	public int[] streid = new int[TopologyMain.nstreBolt + 10];
	public int streidCnt = 0;

	public int[] vecst = new int[TopologyMain.nstreBolt + 10];
	public int[] veced = new int[TopologyMain.nstreBolt + 10];
	public int queueLen = TopologyMain.winSize + 5;

	public int[] vecflag = new int[TopologyMain.nstreBolt + 10];

	public int iniFlag = 1;

	public double[] curexp = new double[TopologyMain.nstreBolt + 10],
			cursqsum = new double[TopologyMain.nstreBolt + 10];

	// ...........computation parameter....................//

	public final double disThre = 2 - 2 * TopologyMain.thre;
	public final double cellEps = Math.sqrt(disThre);
	public final double taskEps = cellEps / TopologyMain.cellTask;
	public int shuffDim = TopologyMain.winSize - 1;
	
	public int hSpaceTaskNum; // TopologyMain.calBoltNum should be even
	public int hSpaceCellNum;

	// ...........emitting streams....................//

	public String ptOutputStr;
	public String vecOutputStr;
	public double taskCoor;
	
	public int[] preTaskCoor = new int[TopologyMain.nstreBolt + 10];
	public int[] preInTaskPos = new int[TopologyMain.nstreBolt + 10];
	
	public long localTaskId = 0;

	// ............input time order..............//

	String streType = new String();
	double ts = 0.0;
	// for long sliding window
	// public double curtstamp = TopologyMain.winSize - 1;
	public double curtstamp = 0.0;
	public double ststamp = 0.0;
	String commandStr = new String(), preCommandStr = new String();

	// .............metric.......................

	double emisData = 0.0;
	int shuffType = 0;

	// ..........................................

	public void calTaskCoor(int idx, int hspaceTask, int hspaceCell, int taskPos[]) {
		int k = shuffDim;
		int tmp = 0, task=0, relPos=0;
		

		normvec[idx][k] = (strevec[idx][k] - curexp[idx])
				/ Math.sqrt(cursqsum[idx] - TopologyMain.winSize * curexp[idx]
						* curexp[idx]);

		if (normvec[idx][k] >= 0) {

			tmp = (int) Math.ceil((double) normvec[idx][k] / cellEps);
			
			task= (int) (Math.ceil(tmp/ TopologyMain.taskCell) + hSpaceTaskNum) ;
			relPos= (tmp%TopologyMain.taskCell)+1;
			
		} else {
			tmp = (int) Math.floor((double) -1 * normvec[idx][k] / cellEps);
			
			task= hSpaceTaskNum-(int)Math.floor(tmp/ TopologyMain.taskCell) ;
			
			relPos= TopologyMain.taskCell-(tmp%TopologyMain.taskCell);
			
		}

		
		
		
		taskPos[0]=task-1;
		taskPos[1]=relPos;
	}

	public String recentPointUpdate(int idx) {
		if (veced[idx] == 0) {
			return Double.toString(strevec[idx][queueLen - 1]);
		} else {
			return Double.toString(strevec[idx][(veced[idx] - 1) % queueLen]);
		}
	}

	public String vectorUpdate(int idx) {

		String coorstr = new String();
		int k = vecst[idx];
		while (k != veced[idx]) {

			coorstr = coorstr + Double.toString(strevec[idx][k]) + ",";

			k = (k + 1) % queueLen;
		}

		return coorstr;
	}

	public void idxNewTuple(int strid, double val, int flag) {
		int i = 0, tmpsn = 0;
		double oldval = 0.0, newval = 0.0;

		for (i = 0; i < streidCnt; ++i) {
			if (streid[i] == strid) {
				tmpsn = i;
				break;
			}
		}
		if (i == streidCnt) {
			streid[i] = strid;
			tmpsn = streidCnt;
			streidCnt++;
		}

		if (vecflag[tmpsn] == 0) {

			strevec[tmpsn][veced[tmpsn]] = val;
			oldval = strevec[tmpsn][vecst[tmpsn]];
			newval = val;
			vecst[tmpsn] = (vecst[tmpsn] + 1 * flag) % queueLen;

			if (shuffDim == (queueLen - 1)) {
				if (vecst[tmpsn] < shuffDim) {
					shuffDim = veced[tmpsn];
				}
			} else {
				if (vecst[tmpsn] > shuffDim) {
					shuffDim = veced[tmpsn];
				}
			}

			veced[tmpsn] = (veced[tmpsn] + 1) % queueLen;

			curexp[tmpsn] = curexp[tmpsn] - oldval / TopologyMain.winSize
					* flag + newval / TopologyMain.winSize;
			cursqsum[tmpsn] = cursqsum[tmpsn] - oldval * oldval * flag + newval
					* newval;

			vecflag[tmpsn] = 1;
		}
	}

	@Override
	public void cleanup() {

	}

	@Override
	public void prepare(Map stormConf, TopologyContext context) {
		// TODO Auto-generated method stub

		for (int j = 0; j < TopologyMain.nstreBolt + 10; j++) {
			vecst[j] = 0;
			veced[j] = 0;

			// for long sliding window
			// veced[j] = TopologyMain.winSize - 1;

			vecflag[j] = 0;
			streid[j] = 0;

			curexp[j] = 0;
			cursqsum[j] = 0;

			preTaskCoor[j] = -1;
		}
		taskCoor = 0.0;

		

		hSpaceCellNum = (int) Math.ceil(1.0 / cellEps);
		
		hSpaceTaskNum =  (int) Math.ceil( hSpaceCellNum/ TopologyMain.taskCell);

		ptOutputStr = new String();
		vecOutputStr = new String();

		localTaskId = context.getThisTaskId();

		return;
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer) {

		declarer.declareStream("streamData", new Fields("repType", "strevec",
				"ts", "taskCoor", "streId", "gap"));

		declarer.declareStream("calCommand", new Fields("command", "taskid"));
		return;
	}

	@Override
	public void execute(Tuple input, BasicOutputCollector collector) {
		// TODO Auto-generated method stub

		int i = 0, curTask = 0, tmpgap = 0;
		streType = input.getSourceStreamId();

		if (streType.compareTo("dataStre") == 0) {

			ts = input.getDoubleByField("ts");
			double tmpval = input.getDoubleByField("value");
			int sn = input.getIntegerByField("sn");

			if (Math.abs(ts - curtstamp) <= 1e-3) {

				idxNewTuple(sn, tmpval, 1 - iniFlag);
			}
		} else if (streType.compareTo("contrStre") == 0) {

			commandStr = input.getStringByField("command");

			if (commandStr.compareTo(preCommandStr) == 0) {
				return;
			}

			if (ts - ststamp >= TopologyMain.winSize - 1) {

				ststamp++;
				emisData = 0.0;
				int taskpos[]=new int[3];

				for (i = 0; i < streidCnt; ++i) {

					calTaskCoor(i, hSpaceTaskNum, hSpaceCellNum, taskpos);

					if (iniFlag == 1) {

						vecOutputStr = vectorUpdate(i);
						tmpgap = TopologyMain.cellTask + 5;

						collector.emit("streamData", new Values(1,
								vecOutputStr, curtstamp, curTask, streid[i],
								tmpgap));

					} else {

						tmpgap = Math.abs(curTask - preTaskCoor[i]);

						ptOutputStr = recentPointUpdate(i);

					

							shuffType = 0;

							collector.emit("streamData", new Values(0,
									ptOutputStr, curtstamp, curTask, streid[i],
									0)); // position
											// 0: same
											// as last
											// time
						
					}
					preTaskCoor[i] = curTask;

					// ............metric........
					if (shuffType == 0) {
						emisData += (TopologyMain.cellTask + 1);
					} else if (shuffType == 1 || shuffType == -1) {
						emisData += (TopologyMain.winSize * (TopologyMain.cellTask + 1));
					} else if (shuffType == 10 || shuffType == -10) {
						emisData += ((tmpgap * TopologyMain.winSize) + (TopologyMain.cellTask - tmpgap));
					}

					

				}


				collector.emit("calCommand",
						new Values("done" + Double.toString(curtstamp),
								localTaskId));
				iniFlag = 0;

			}

			// .....update for next tuple...............//
			preCommandStr = commandStr;

			for (int j = 0; j < TopologyMain.nstreBolt + 5; ++j) {

				vecflag[j] = 0;
			}
			curtstamp = ts + 1;

		}
	}
}
